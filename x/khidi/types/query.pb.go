// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: khidi/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetHyMarketsizeRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetHyMarketsizeRequest) Reset()         { *m = QueryGetHyMarketsizeRequest{} }
func (m *QueryGetHyMarketsizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyMarketsizeRequest) ProtoMessage()    {}
func (*QueryGetHyMarketsizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{2}
}
func (m *QueryGetHyMarketsizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyMarketsizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyMarketsizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyMarketsizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyMarketsizeRequest.Merge(m, src)
}
func (m *QueryGetHyMarketsizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyMarketsizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyMarketsizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyMarketsizeRequest proto.InternalMessageInfo

func (m *QueryGetHyMarketsizeRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetHyMarketsizeResponse struct {
	HyMarketsize HyMarketsize `protobuf:"bytes,1,opt,name=hyMarketsize,proto3" json:"hyMarketsize"`
}

func (m *QueryGetHyMarketsizeResponse) Reset()         { *m = QueryGetHyMarketsizeResponse{} }
func (m *QueryGetHyMarketsizeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyMarketsizeResponse) ProtoMessage()    {}
func (*QueryGetHyMarketsizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{3}
}
func (m *QueryGetHyMarketsizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyMarketsizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyMarketsizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyMarketsizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyMarketsizeResponse.Merge(m, src)
}
func (m *QueryGetHyMarketsizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyMarketsizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyMarketsizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyMarketsizeResponse proto.InternalMessageInfo

func (m *QueryGetHyMarketsizeResponse) GetHyMarketsize() HyMarketsize {
	if m != nil {
		return m.HyMarketsize
	}
	return HyMarketsize{}
}

type QueryAllHyMarketsizeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHyMarketsizeRequest) Reset()         { *m = QueryAllHyMarketsizeRequest{} }
func (m *QueryAllHyMarketsizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHyMarketsizeRequest) ProtoMessage()    {}
func (*QueryAllHyMarketsizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{4}
}
func (m *QueryAllHyMarketsizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHyMarketsizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHyMarketsizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHyMarketsizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHyMarketsizeRequest.Merge(m, src)
}
func (m *QueryAllHyMarketsizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHyMarketsizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHyMarketsizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHyMarketsizeRequest proto.InternalMessageInfo

func (m *QueryAllHyMarketsizeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHyMarketsizeResponse struct {
	HyMarketsize []HyMarketsize      `protobuf:"bytes,1,rep,name=hyMarketsize,proto3" json:"hyMarketsize"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHyMarketsizeResponse) Reset()         { *m = QueryAllHyMarketsizeResponse{} }
func (m *QueryAllHyMarketsizeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHyMarketsizeResponse) ProtoMessage()    {}
func (*QueryAllHyMarketsizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{5}
}
func (m *QueryAllHyMarketsizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHyMarketsizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHyMarketsizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHyMarketsizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHyMarketsizeResponse.Merge(m, src)
}
func (m *QueryAllHyMarketsizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHyMarketsizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHyMarketsizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHyMarketsizeResponse proto.InternalMessageInfo

func (m *QueryAllHyMarketsizeResponse) GetHyMarketsize() []HyMarketsize {
	if m != nil {
		return m.HyMarketsize
	}
	return nil
}

func (m *QueryAllHyMarketsizeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHyPartnerRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetHyPartnerRequest) Reset()         { *m = QueryGetHyPartnerRequest{} }
func (m *QueryGetHyPartnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyPartnerRequest) ProtoMessage()    {}
func (*QueryGetHyPartnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{6}
}
func (m *QueryGetHyPartnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyPartnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyPartnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyPartnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyPartnerRequest.Merge(m, src)
}
func (m *QueryGetHyPartnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyPartnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyPartnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyPartnerRequest proto.InternalMessageInfo

func (m *QueryGetHyPartnerRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetHyPartnerResponse struct {
	HyPartner HyPartner `protobuf:"bytes,1,opt,name=hyPartner,proto3" json:"hyPartner"`
}

func (m *QueryGetHyPartnerResponse) Reset()         { *m = QueryGetHyPartnerResponse{} }
func (m *QueryGetHyPartnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyPartnerResponse) ProtoMessage()    {}
func (*QueryGetHyPartnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{7}
}
func (m *QueryGetHyPartnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyPartnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyPartnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyPartnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyPartnerResponse.Merge(m, src)
}
func (m *QueryGetHyPartnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyPartnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyPartnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyPartnerResponse proto.InternalMessageInfo

func (m *QueryGetHyPartnerResponse) GetHyPartner() HyPartner {
	if m != nil {
		return m.HyPartner
	}
	return HyPartner{}
}

type QueryAllHyPartnerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHyPartnerRequest) Reset()         { *m = QueryAllHyPartnerRequest{} }
func (m *QueryAllHyPartnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHyPartnerRequest) ProtoMessage()    {}
func (*QueryAllHyPartnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{8}
}
func (m *QueryAllHyPartnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHyPartnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHyPartnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHyPartnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHyPartnerRequest.Merge(m, src)
}
func (m *QueryAllHyPartnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHyPartnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHyPartnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHyPartnerRequest proto.InternalMessageInfo

func (m *QueryAllHyPartnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHyPartnerResponse struct {
	HyPartner  []HyPartner         `protobuf:"bytes,1,rep,name=hyPartner,proto3" json:"hyPartner"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHyPartnerResponse) Reset()         { *m = QueryAllHyPartnerResponse{} }
func (m *QueryAllHyPartnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHyPartnerResponse) ProtoMessage()    {}
func (*QueryAllHyPartnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{9}
}
func (m *QueryAllHyPartnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHyPartnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHyPartnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHyPartnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHyPartnerResponse.Merge(m, src)
}
func (m *QueryAllHyPartnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHyPartnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHyPartnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHyPartnerResponse proto.InternalMessageInfo

func (m *QueryAllHyPartnerResponse) GetHyPartner() []HyPartner {
	if m != nil {
		return m.HyPartner
	}
	return nil
}

func (m *QueryAllHyPartnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHyImportRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetHyImportRequest) Reset()         { *m = QueryGetHyImportRequest{} }
func (m *QueryGetHyImportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyImportRequest) ProtoMessage()    {}
func (*QueryGetHyImportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{10}
}
func (m *QueryGetHyImportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyImportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyImportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyImportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyImportRequest.Merge(m, src)
}
func (m *QueryGetHyImportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyImportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyImportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyImportRequest proto.InternalMessageInfo

func (m *QueryGetHyImportRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetHyImportResponse struct {
	HyImport HyImport `protobuf:"bytes,1,opt,name=hyImport,proto3" json:"hyImport"`
}

func (m *QueryGetHyImportResponse) Reset()         { *m = QueryGetHyImportResponse{} }
func (m *QueryGetHyImportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyImportResponse) ProtoMessage()    {}
func (*QueryGetHyImportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{11}
}
func (m *QueryGetHyImportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyImportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyImportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyImportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyImportResponse.Merge(m, src)
}
func (m *QueryGetHyImportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyImportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyImportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyImportResponse proto.InternalMessageInfo

func (m *QueryGetHyImportResponse) GetHyImport() HyImport {
	if m != nil {
		return m.HyImport
	}
	return HyImport{}
}

type QueryAllHyImportRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHyImportRequest) Reset()         { *m = QueryAllHyImportRequest{} }
func (m *QueryAllHyImportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHyImportRequest) ProtoMessage()    {}
func (*QueryAllHyImportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{12}
}
func (m *QueryAllHyImportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHyImportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHyImportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHyImportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHyImportRequest.Merge(m, src)
}
func (m *QueryAllHyImportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHyImportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHyImportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHyImportRequest proto.InternalMessageInfo

func (m *QueryAllHyImportRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHyImportResponse struct {
	HyImport   []HyImport          `protobuf:"bytes,1,rep,name=hyImport,proto3" json:"hyImport"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHyImportResponse) Reset()         { *m = QueryAllHyImportResponse{} }
func (m *QueryAllHyImportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHyImportResponse) ProtoMessage()    {}
func (*QueryAllHyImportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{13}
}
func (m *QueryAllHyImportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHyImportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHyImportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHyImportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHyImportResponse.Merge(m, src)
}
func (m *QueryAllHyImportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHyImportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHyImportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHyImportResponse proto.InternalMessageInfo

func (m *QueryAllHyImportResponse) GetHyImport() []HyImport {
	if m != nil {
		return m.HyImport
	}
	return nil
}

func (m *QueryAllHyImportResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHyExportRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetHyExportRequest) Reset()         { *m = QueryGetHyExportRequest{} }
func (m *QueryGetHyExportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyExportRequest) ProtoMessage()    {}
func (*QueryGetHyExportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{14}
}
func (m *QueryGetHyExportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyExportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyExportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyExportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyExportRequest.Merge(m, src)
}
func (m *QueryGetHyExportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyExportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyExportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyExportRequest proto.InternalMessageInfo

func (m *QueryGetHyExportRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetHyExportResponse struct {
	HyExport HyExport `protobuf:"bytes,1,opt,name=hyExport,proto3" json:"hyExport"`
}

func (m *QueryGetHyExportResponse) Reset()         { *m = QueryGetHyExportResponse{} }
func (m *QueryGetHyExportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyExportResponse) ProtoMessage()    {}
func (*QueryGetHyExportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{15}
}
func (m *QueryGetHyExportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyExportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyExportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyExportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyExportResponse.Merge(m, src)
}
func (m *QueryGetHyExportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyExportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyExportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyExportResponse proto.InternalMessageInfo

func (m *QueryGetHyExportResponse) GetHyExport() HyExport {
	if m != nil {
		return m.HyExport
	}
	return HyExport{}
}

type QueryAllHyExportRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHyExportRequest) Reset()         { *m = QueryAllHyExportRequest{} }
func (m *QueryAllHyExportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHyExportRequest) ProtoMessage()    {}
func (*QueryAllHyExportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{16}
}
func (m *QueryAllHyExportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHyExportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHyExportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHyExportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHyExportRequest.Merge(m, src)
}
func (m *QueryAllHyExportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHyExportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHyExportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHyExportRequest proto.InternalMessageInfo

func (m *QueryAllHyExportRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHyExportResponse struct {
	HyExport   []HyExport          `protobuf:"bytes,1,rep,name=hyExport,proto3" json:"hyExport"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHyExportResponse) Reset()         { *m = QueryAllHyExportResponse{} }
func (m *QueryAllHyExportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHyExportResponse) ProtoMessage()    {}
func (*QueryAllHyExportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{17}
}
func (m *QueryAllHyExportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHyExportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHyExportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHyExportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHyExportResponse.Merge(m, src)
}
func (m *QueryAllHyExportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHyExportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHyExportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHyExportResponse proto.InternalMessageInfo

func (m *QueryAllHyExportResponse) GetHyExport() []HyExport {
	if m != nil {
		return m.HyExport
	}
	return nil
}

func (m *QueryAllHyExportResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryHyRecentMarketsizeRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyRecentMarketsizeRequest) Reset()         { *m = QueryHyRecentMarketsizeRequest{} }
func (m *QueryHyRecentMarketsizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyRecentMarketsizeRequest) ProtoMessage()    {}
func (*QueryHyRecentMarketsizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{18}
}
func (m *QueryHyRecentMarketsizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyRecentMarketsizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyRecentMarketsizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyRecentMarketsizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyRecentMarketsizeRequest.Merge(m, src)
}
func (m *QueryHyRecentMarketsizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyRecentMarketsizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyRecentMarketsizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyRecentMarketsizeRequest proto.InternalMessageInfo

func (m *QueryHyRecentMarketsizeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyRecentMarketsizeRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyRecentMarketsizeResponse struct {
	Volume string `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *QueryHyRecentMarketsizeResponse) Reset()         { *m = QueryHyRecentMarketsizeResponse{} }
func (m *QueryHyRecentMarketsizeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyRecentMarketsizeResponse) ProtoMessage()    {}
func (*QueryHyRecentMarketsizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{19}
}
func (m *QueryHyRecentMarketsizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyRecentMarketsizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyRecentMarketsizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyRecentMarketsizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyRecentMarketsizeResponse.Merge(m, src)
}
func (m *QueryHyRecentMarketsizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyRecentMarketsizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyRecentMarketsizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyRecentMarketsizeResponse proto.InternalMessageInfo

func (m *QueryHyRecentMarketsizeResponse) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

type QueryHyRecentPartnerRequest struct {
	Buyer  string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller string `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *QueryHyRecentPartnerRequest) Reset()         { *m = QueryHyRecentPartnerRequest{} }
func (m *QueryHyRecentPartnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyRecentPartnerRequest) ProtoMessage()    {}
func (*QueryHyRecentPartnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{20}
}
func (m *QueryHyRecentPartnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyRecentPartnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyRecentPartnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyRecentPartnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyRecentPartnerRequest.Merge(m, src)
}
func (m *QueryHyRecentPartnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyRecentPartnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyRecentPartnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyRecentPartnerRequest proto.InternalMessageInfo

func (m *QueryHyRecentPartnerRequest) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *QueryHyRecentPartnerRequest) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

type QueryHyRecentPartnerResponse struct {
	Volume string `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *QueryHyRecentPartnerResponse) Reset()         { *m = QueryHyRecentPartnerResponse{} }
func (m *QueryHyRecentPartnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyRecentPartnerResponse) ProtoMessage()    {}
func (*QueryHyRecentPartnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{21}
}
func (m *QueryHyRecentPartnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyRecentPartnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyRecentPartnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyRecentPartnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyRecentPartnerResponse.Merge(m, src)
}
func (m *QueryHyRecentPartnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyRecentPartnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyRecentPartnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyRecentPartnerResponse proto.InternalMessageInfo

func (m *QueryHyRecentPartnerResponse) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

type QueryHyRecentImportRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyRecentImportRequest) Reset()         { *m = QueryHyRecentImportRequest{} }
func (m *QueryHyRecentImportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyRecentImportRequest) ProtoMessage()    {}
func (*QueryHyRecentImportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{22}
}
func (m *QueryHyRecentImportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyRecentImportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyRecentImportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyRecentImportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyRecentImportRequest.Merge(m, src)
}
func (m *QueryHyRecentImportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyRecentImportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyRecentImportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyRecentImportRequest proto.InternalMessageInfo

func (m *QueryHyRecentImportRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyRecentImportRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyRecentImportResponse struct {
	Volume string `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *QueryHyRecentImportResponse) Reset()         { *m = QueryHyRecentImportResponse{} }
func (m *QueryHyRecentImportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyRecentImportResponse) ProtoMessage()    {}
func (*QueryHyRecentImportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{23}
}
func (m *QueryHyRecentImportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyRecentImportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyRecentImportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyRecentImportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyRecentImportResponse.Merge(m, src)
}
func (m *QueryHyRecentImportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyRecentImportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyRecentImportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyRecentImportResponse proto.InternalMessageInfo

func (m *QueryHyRecentImportResponse) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

type QueryHyRecentExportRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyRecentExportRequest) Reset()         { *m = QueryHyRecentExportRequest{} }
func (m *QueryHyRecentExportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyRecentExportRequest) ProtoMessage()    {}
func (*QueryHyRecentExportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{24}
}
func (m *QueryHyRecentExportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyRecentExportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyRecentExportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyRecentExportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyRecentExportRequest.Merge(m, src)
}
func (m *QueryHyRecentExportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyRecentExportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyRecentExportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyRecentExportRequest proto.InternalMessageInfo

func (m *QueryHyRecentExportRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyRecentExportRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyRecentExportResponse struct {
	Volume string `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *QueryHyRecentExportResponse) Reset()         { *m = QueryHyRecentExportResponse{} }
func (m *QueryHyRecentExportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyRecentExportResponse) ProtoMessage()    {}
func (*QueryHyRecentExportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{25}
}
func (m *QueryHyRecentExportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyRecentExportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyRecentExportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyRecentExportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyRecentExportResponse.Merge(m, src)
}
func (m *QueryHyRecentExportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyRecentExportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyRecentExportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyRecentExportResponse proto.InternalMessageInfo

func (m *QueryHyRecentExportResponse) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

type QueryHyDomesticMarketShareRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyDomesticMarketShareRequest) Reset()         { *m = QueryHyDomesticMarketShareRequest{} }
func (m *QueryHyDomesticMarketShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyDomesticMarketShareRequest) ProtoMessage()    {}
func (*QueryHyDomesticMarketShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{26}
}
func (m *QueryHyDomesticMarketShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyDomesticMarketShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyDomesticMarketShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyDomesticMarketShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyDomesticMarketShareRequest.Merge(m, src)
}
func (m *QueryHyDomesticMarketShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyDomesticMarketShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyDomesticMarketShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyDomesticMarketShareRequest proto.InternalMessageInfo

func (m *QueryHyDomesticMarketShareRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyDomesticMarketShareRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyDomesticMarketShareResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryHyDomesticMarketShareResponse) Reset()         { *m = QueryHyDomesticMarketShareResponse{} }
func (m *QueryHyDomesticMarketShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyDomesticMarketShareResponse) ProtoMessage()    {}
func (*QueryHyDomesticMarketShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{27}
}
func (m *QueryHyDomesticMarketShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyDomesticMarketShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyDomesticMarketShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyDomesticMarketShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyDomesticMarketShareResponse.Merge(m, src)
}
func (m *QueryHyDomesticMarketShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyDomesticMarketShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyDomesticMarketShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyDomesticMarketShareResponse proto.InternalMessageInfo

func (m *QueryHyDomesticMarketShareResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryHyCompetitionRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyCompetitionRequest) Reset()         { *m = QueryHyCompetitionRequest{} }
func (m *QueryHyCompetitionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyCompetitionRequest) ProtoMessage()    {}
func (*QueryHyCompetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{28}
}
func (m *QueryHyCompetitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyCompetitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyCompetitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyCompetitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyCompetitionRequest.Merge(m, src)
}
func (m *QueryHyCompetitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyCompetitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyCompetitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyCompetitionRequest proto.InternalMessageInfo

func (m *QueryHyCompetitionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyCompetitionRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyCompetitionResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryHyCompetitionResponse) Reset()         { *m = QueryHyCompetitionResponse{} }
func (m *QueryHyCompetitionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyCompetitionResponse) ProtoMessage()    {}
func (*QueryHyCompetitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{29}
}
func (m *QueryHyCompetitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyCompetitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyCompetitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyCompetitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyCompetitionResponse.Merge(m, src)
}
func (m *QueryHyCompetitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyCompetitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyCompetitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyCompetitionResponse proto.InternalMessageInfo

func (m *QueryHyCompetitionResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryHyTradeDependencyRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyTradeDependencyRequest) Reset()         { *m = QueryHyTradeDependencyRequest{} }
func (m *QueryHyTradeDependencyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyTradeDependencyRequest) ProtoMessage()    {}
func (*QueryHyTradeDependencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{30}
}
func (m *QueryHyTradeDependencyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyTradeDependencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyTradeDependencyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyTradeDependencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyTradeDependencyRequest.Merge(m, src)
}
func (m *QueryHyTradeDependencyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyTradeDependencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyTradeDependencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyTradeDependencyRequest proto.InternalMessageInfo

func (m *QueryHyTradeDependencyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyTradeDependencyRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyTradeDependencyResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryHyTradeDependencyResponse) Reset()         { *m = QueryHyTradeDependencyResponse{} }
func (m *QueryHyTradeDependencyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyTradeDependencyResponse) ProtoMessage()    {}
func (*QueryHyTradeDependencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{31}
}
func (m *QueryHyTradeDependencyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyTradeDependencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyTradeDependencyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyTradeDependencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyTradeDependencyResponse.Merge(m, src)
}
func (m *QueryHyTradeDependencyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyTradeDependencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyTradeDependencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyTradeDependencyResponse proto.InternalMessageInfo

func (m *QueryHyTradeDependencyResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryHyQualityRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyQualityRequest) Reset()         { *m = QueryHyQualityRequest{} }
func (m *QueryHyQualityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyQualityRequest) ProtoMessage()    {}
func (*QueryHyQualityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{32}
}
func (m *QueryHyQualityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyQualityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyQualityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyQualityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyQualityRequest.Merge(m, src)
}
func (m *QueryHyQualityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyQualityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyQualityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyQualityRequest proto.InternalMessageInfo

func (m *QueryHyQualityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyQualityRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyQualityResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryHyQualityResponse) Reset()         { *m = QueryHyQualityResponse{} }
func (m *QueryHyQualityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyQualityResponse) ProtoMessage()    {}
func (*QueryHyQualityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{33}
}
func (m *QueryHyQualityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyQualityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyQualityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyQualityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyQualityResponse.Merge(m, src)
}
func (m *QueryHyQualityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyQualityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyQualityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyQualityResponse proto.InternalMessageInfo

func (m *QueryHyQualityResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryHyProtectionismRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyProtectionismRequest) Reset()         { *m = QueryHyProtectionismRequest{} }
func (m *QueryHyProtectionismRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyProtectionismRequest) ProtoMessage()    {}
func (*QueryHyProtectionismRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{34}
}
func (m *QueryHyProtectionismRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyProtectionismRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyProtectionismRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyProtectionismRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyProtectionismRequest.Merge(m, src)
}
func (m *QueryHyProtectionismRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyProtectionismRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyProtectionismRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyProtectionismRequest proto.InternalMessageInfo

func (m *QueryHyProtectionismRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyProtectionismRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyProtectionismResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryHyProtectionismResponse) Reset()         { *m = QueryHyProtectionismResponse{} }
func (m *QueryHyProtectionismResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyProtectionismResponse) ProtoMessage()    {}
func (*QueryHyProtectionismResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{35}
}
func (m *QueryHyProtectionismResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyProtectionismResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyProtectionismResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyProtectionismResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyProtectionismResponse.Merge(m, src)
}
func (m *QueryHyProtectionismResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyProtectionismResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyProtectionismResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyProtectionismResponse proto.InternalMessageInfo

func (m *QueryHyProtectionismResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryHySuccessRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHySuccessRequest) Reset()         { *m = QueryHySuccessRequest{} }
func (m *QueryHySuccessRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHySuccessRequest) ProtoMessage()    {}
func (*QueryHySuccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{36}
}
func (m *QueryHySuccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHySuccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHySuccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHySuccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHySuccessRequest.Merge(m, src)
}
func (m *QueryHySuccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHySuccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHySuccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHySuccessRequest proto.InternalMessageInfo

func (m *QueryHySuccessRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHySuccessRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHySuccessResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryHySuccessResponse) Reset()         { *m = QueryHySuccessResponse{} }
func (m *QueryHySuccessResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHySuccessResponse) ProtoMessage()    {}
func (*QueryHySuccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{37}
}
func (m *QueryHySuccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHySuccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHySuccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHySuccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHySuccessResponse.Merge(m, src)
}
func (m *QueryHySuccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHySuccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHySuccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHySuccessResponse proto.InternalMessageInfo

func (m *QueryHySuccessResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryHyAllValuesOfRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyAllValuesOfRequest) Reset()         { *m = QueryHyAllValuesOfRequest{} }
func (m *QueryHyAllValuesOfRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyAllValuesOfRequest) ProtoMessage()    {}
func (*QueryHyAllValuesOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{38}
}
func (m *QueryHyAllValuesOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyAllValuesOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyAllValuesOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyAllValuesOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyAllValuesOfRequest.Merge(m, src)
}
func (m *QueryHyAllValuesOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyAllValuesOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyAllValuesOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyAllValuesOfRequest proto.InternalMessageInfo

func (m *QueryHyAllValuesOfRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryHyAllValuesOfRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyAllValuesOfResponse struct {
	RecentMarketsize    string `protobuf:"bytes,1,opt,name=recentMarketsize,proto3" json:"recentMarketsize,omitempty"`
	RecentImport        string `protobuf:"bytes,2,opt,name=recentImport,proto3" json:"recentImport,omitempty"`
	RecentExport        string `protobuf:"bytes,3,opt,name=recentExport,proto3" json:"recentExport,omitempty"`
	DomesticMarketShare string `protobuf:"bytes,4,opt,name=domesticMarketShare,proto3" json:"domesticMarketShare,omitempty"`
	Competition         string `protobuf:"bytes,5,opt,name=competition,proto3" json:"competition,omitempty"`
	TradeDependency     string `protobuf:"bytes,6,opt,name=tradeDependency,proto3" json:"tradeDependency,omitempty"`
	Quality             string `protobuf:"bytes,7,opt,name=quality,proto3" json:"quality,omitempty"`
	Protectionism       string `protobuf:"bytes,8,opt,name=protectionism,proto3" json:"protectionism,omitempty"`
	Success             string `protobuf:"bytes,9,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *QueryHyAllValuesOfResponse) Reset()         { *m = QueryHyAllValuesOfResponse{} }
func (m *QueryHyAllValuesOfResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyAllValuesOfResponse) ProtoMessage()    {}
func (*QueryHyAllValuesOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{39}
}
func (m *QueryHyAllValuesOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyAllValuesOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyAllValuesOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyAllValuesOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyAllValuesOfResponse.Merge(m, src)
}
func (m *QueryHyAllValuesOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyAllValuesOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyAllValuesOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyAllValuesOfResponse proto.InternalMessageInfo

func (m *QueryHyAllValuesOfResponse) GetRecentMarketsize() string {
	if m != nil {
		return m.RecentMarketsize
	}
	return ""
}

func (m *QueryHyAllValuesOfResponse) GetRecentImport() string {
	if m != nil {
		return m.RecentImport
	}
	return ""
}

func (m *QueryHyAllValuesOfResponse) GetRecentExport() string {
	if m != nil {
		return m.RecentExport
	}
	return ""
}

func (m *QueryHyAllValuesOfResponse) GetDomesticMarketShare() string {
	if m != nil {
		return m.DomesticMarketShare
	}
	return ""
}

func (m *QueryHyAllValuesOfResponse) GetCompetition() string {
	if m != nil {
		return m.Competition
	}
	return ""
}

func (m *QueryHyAllValuesOfResponse) GetTradeDependency() string {
	if m != nil {
		return m.TradeDependency
	}
	return ""
}

func (m *QueryHyAllValuesOfResponse) GetQuality() string {
	if m != nil {
		return m.Quality
	}
	return ""
}

func (m *QueryHyAllValuesOfResponse) GetProtectionism() string {
	if m != nil {
		return m.Protectionism
	}
	return ""
}

func (m *QueryHyAllValuesOfResponse) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

type QueryHyAllNamesOfRequest struct {
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *QueryHyAllNamesOfRequest) Reset()         { *m = QueryHyAllNamesOfRequest{} }
func (m *QueryHyAllNamesOfRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHyAllNamesOfRequest) ProtoMessage()    {}
func (*QueryHyAllNamesOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{40}
}
func (m *QueryHyAllNamesOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyAllNamesOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyAllNamesOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyAllNamesOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyAllNamesOfRequest.Merge(m, src)
}
func (m *QueryHyAllNamesOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyAllNamesOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyAllNamesOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyAllNamesOfRequest proto.InternalMessageInfo

func (m *QueryHyAllNamesOfRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type QueryHyAllNamesOfResponse struct {
	HyAllNamesOf []*HyAllNamesOf `protobuf:"bytes,1,rep,name=HyAllNamesOf,proto3" json:"HyAllNamesOf,omitempty"`
}

func (m *QueryHyAllNamesOfResponse) Reset()         { *m = QueryHyAllNamesOfResponse{} }
func (m *QueryHyAllNamesOfResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHyAllNamesOfResponse) ProtoMessage()    {}
func (*QueryHyAllNamesOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f630ab15a38f92db, []int{41}
}
func (m *QueryHyAllNamesOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHyAllNamesOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHyAllNamesOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHyAllNamesOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHyAllNamesOfResponse.Merge(m, src)
}
func (m *QueryHyAllNamesOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHyAllNamesOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHyAllNamesOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHyAllNamesOfResponse proto.InternalMessageInfo

func (m *QueryHyAllNamesOfResponse) GetHyAllNamesOf() []*HyAllNamesOf {
	if m != nil {
		return m.HyAllNamesOf
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "khidi.khidi.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "khidi.khidi.QueryParamsResponse")
	proto.RegisterType((*QueryGetHyMarketsizeRequest)(nil), "khidi.khidi.QueryGetHyMarketsizeRequest")
	proto.RegisterType((*QueryGetHyMarketsizeResponse)(nil), "khidi.khidi.QueryGetHyMarketsizeResponse")
	proto.RegisterType((*QueryAllHyMarketsizeRequest)(nil), "khidi.khidi.QueryAllHyMarketsizeRequest")
	proto.RegisterType((*QueryAllHyMarketsizeResponse)(nil), "khidi.khidi.QueryAllHyMarketsizeResponse")
	proto.RegisterType((*QueryGetHyPartnerRequest)(nil), "khidi.khidi.QueryGetHyPartnerRequest")
	proto.RegisterType((*QueryGetHyPartnerResponse)(nil), "khidi.khidi.QueryGetHyPartnerResponse")
	proto.RegisterType((*QueryAllHyPartnerRequest)(nil), "khidi.khidi.QueryAllHyPartnerRequest")
	proto.RegisterType((*QueryAllHyPartnerResponse)(nil), "khidi.khidi.QueryAllHyPartnerResponse")
	proto.RegisterType((*QueryGetHyImportRequest)(nil), "khidi.khidi.QueryGetHyImportRequest")
	proto.RegisterType((*QueryGetHyImportResponse)(nil), "khidi.khidi.QueryGetHyImportResponse")
	proto.RegisterType((*QueryAllHyImportRequest)(nil), "khidi.khidi.QueryAllHyImportRequest")
	proto.RegisterType((*QueryAllHyImportResponse)(nil), "khidi.khidi.QueryAllHyImportResponse")
	proto.RegisterType((*QueryGetHyExportRequest)(nil), "khidi.khidi.QueryGetHyExportRequest")
	proto.RegisterType((*QueryGetHyExportResponse)(nil), "khidi.khidi.QueryGetHyExportResponse")
	proto.RegisterType((*QueryAllHyExportRequest)(nil), "khidi.khidi.QueryAllHyExportRequest")
	proto.RegisterType((*QueryAllHyExportResponse)(nil), "khidi.khidi.QueryAllHyExportResponse")
	proto.RegisterType((*QueryHyRecentMarketsizeRequest)(nil), "khidi.khidi.QueryHyRecentMarketsizeRequest")
	proto.RegisterType((*QueryHyRecentMarketsizeResponse)(nil), "khidi.khidi.QueryHyRecentMarketsizeResponse")
	proto.RegisterType((*QueryHyRecentPartnerRequest)(nil), "khidi.khidi.QueryHyRecentPartnerRequest")
	proto.RegisterType((*QueryHyRecentPartnerResponse)(nil), "khidi.khidi.QueryHyRecentPartnerResponse")
	proto.RegisterType((*QueryHyRecentImportRequest)(nil), "khidi.khidi.QueryHyRecentImportRequest")
	proto.RegisterType((*QueryHyRecentImportResponse)(nil), "khidi.khidi.QueryHyRecentImportResponse")
	proto.RegisterType((*QueryHyRecentExportRequest)(nil), "khidi.khidi.QueryHyRecentExportRequest")
	proto.RegisterType((*QueryHyRecentExportResponse)(nil), "khidi.khidi.QueryHyRecentExportResponse")
	proto.RegisterType((*QueryHyDomesticMarketShareRequest)(nil), "khidi.khidi.QueryHyDomesticMarketShareRequest")
	proto.RegisterType((*QueryHyDomesticMarketShareResponse)(nil), "khidi.khidi.QueryHyDomesticMarketShareResponse")
	proto.RegisterType((*QueryHyCompetitionRequest)(nil), "khidi.khidi.QueryHyCompetitionRequest")
	proto.RegisterType((*QueryHyCompetitionResponse)(nil), "khidi.khidi.QueryHyCompetitionResponse")
	proto.RegisterType((*QueryHyTradeDependencyRequest)(nil), "khidi.khidi.QueryHyTradeDependencyRequest")
	proto.RegisterType((*QueryHyTradeDependencyResponse)(nil), "khidi.khidi.QueryHyTradeDependencyResponse")
	proto.RegisterType((*QueryHyQualityRequest)(nil), "khidi.khidi.QueryHyQualityRequest")
	proto.RegisterType((*QueryHyQualityResponse)(nil), "khidi.khidi.QueryHyQualityResponse")
	proto.RegisterType((*QueryHyProtectionismRequest)(nil), "khidi.khidi.QueryHyProtectionismRequest")
	proto.RegisterType((*QueryHyProtectionismResponse)(nil), "khidi.khidi.QueryHyProtectionismResponse")
	proto.RegisterType((*QueryHySuccessRequest)(nil), "khidi.khidi.QueryHySuccessRequest")
	proto.RegisterType((*QueryHySuccessResponse)(nil), "khidi.khidi.QueryHySuccessResponse")
	proto.RegisterType((*QueryHyAllValuesOfRequest)(nil), "khidi.khidi.QueryHyAllValuesOfRequest")
	proto.RegisterType((*QueryHyAllValuesOfResponse)(nil), "khidi.khidi.QueryHyAllValuesOfResponse")
	proto.RegisterType((*QueryHyAllNamesOfRequest)(nil), "khidi.khidi.QueryHyAllNamesOfRequest")
	proto.RegisterType((*QueryHyAllNamesOfResponse)(nil), "khidi.khidi.QueryHyAllNamesOfResponse")
}

func init() { proto.RegisterFile("khidi/query.proto", fileDescriptor_f630ab15a38f92db) }

var fileDescriptor_f630ab15a38f92db = []byte{
	// 1589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x99, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0xc0, 0xe3, 0xa6, 0x49, 0x9b, 0x49, 0xfb, 0xed, 0xb7, 0x93, 0x1f, 0xdd, 0xb8, 0x65, 0x93,
	0x9a, 0x74, 0xb3, 0xa4, 0xc1, 0x6e, 0xd2, 0xd2, 0x42, 0x05, 0x87, 0xf4, 0x67, 0x0a, 0x2a, 0xa4,
	0x5b, 0x04, 0x52, 0x2f, 0x2b, 0x67, 0x77, 0xba, 0x6b, 0xd5, 0xbb, 0x76, 0x6d, 0x6f, 0x95, 0x6d,
	0x15, 0x90, 0x80, 0x13, 0x1c, 0x40, 0x02, 0x21, 0x21, 0x55, 0x82, 0x0b, 0x07, 0x24, 0xce, 0xfc,
	0x0d, 0x3d, 0x56, 0xe2, 0xc2, 0x09, 0xa1, 0x94, 0x03, 0x7f, 0x06, 0xf2, 0xcc, 0xb3, 0xd7, 0x63,
	0xcf, 0xac, 0x77, 0x43, 0x7a, 0xa9, 0xea, 0xf1, 0xfb, 0xf1, 0x79, 0xf3, 0xde, 0x8c, 0xdf, 0xdb,
	0xa0, 0xe3, 0x0f, 0x9a, 0x56, 0xdd, 0x32, 0x1e, 0x76, 0x88, 0xd7, 0xd5, 0x5d, 0xcf, 0x09, 0x1c,
	0x3c, 0x49, 0x97, 0x74, 0xfa, 0xaf, 0x3a, 0xdd, 0x70, 0x1a, 0x0e, 0x5d, 0x37, 0xc2, 0xff, 0x31,
	0x11, 0xf5, 0x54, 0xc3, 0x71, 0x1a, 0x36, 0x31, 0x4c, 0xd7, 0x32, 0xcc, 0x76, 0xdb, 0x09, 0xcc,
	0xc0, 0x72, 0xda, 0x3e, 0xbc, 0x5d, 0xae, 0x39, 0x7e, 0xcb, 0xf1, 0x8d, 0x2d, 0xd3, 0x27, 0xcc,
	0xb2, 0xf1, 0x68, 0x75, 0x8b, 0x04, 0xe6, 0xaa, 0xe1, 0x9a, 0x0d, 0xab, 0x4d, 0x85, 0x41, 0x16,
	0x33, 0xff, 0xae, 0xe9, 0x99, 0xad, 0x48, 0x7f, 0x8e, 0xad, 0x35, 0xbb, 0xd5, 0x96, 0xe9, 0x3d,
	0x20, 0x81, 0x6f, 0x3d, 0x26, 0xf0, 0x6a, 0x36, 0x7e, 0xe5, 0x9a, 0x5e, 0xd0, 0x26, 0x1e, 0xac,
	0xcf, 0xc4, 0xeb, 0x56, 0xcb, 0x75, 0xbc, 0x20, 0xb3, 0x4c, 0xb6, 0x13, 0xcb, 0x27, 0xe3, 0x65,
	0xd3, 0xb6, 0xab, 0x6d, 0xb3, 0x45, 0xfc, 0xaa, 0x73, 0x9f, 0xbd, 0xd4, 0xa6, 0x11, 0xbe, 0x13,
	0x32, 0x6f, 0x52, 0xa4, 0x0a, 0x79, 0xd8, 0x21, 0x7e, 0xa0, 0x6d, 0xa0, 0x29, 0x6e, 0xd5, 0x77,
	0x9d, 0xb6, 0x4f, 0xf0, 0x2a, 0x1a, 0x67, 0xe8, 0x05, 0x65, 0x41, 0x29, 0x4f, 0xae, 0x4d, 0xe9,
	0x89, 0xcd, 0xd3, 0x99, 0xf0, 0x95, 0x83, 0xcf, 0xfe, 0x9c, 0x1f, 0xa9, 0x80, 0xa0, 0x76, 0x1e,
	0x9d, 0xa4, 0x96, 0x6e, 0x92, 0x60, 0xa3, 0x7b, 0x3b, 0x0e, 0x10, 0x1c, 0xe1, 0x69, 0x34, 0x66,
	0xb5, 0xeb, 0x64, 0x9b, 0x1a, 0x9c, 0xa8, 0xb0, 0x07, 0xad, 0x86, 0x4e, 0x89, 0x95, 0x80, 0xe3,
	0x2a, 0x3a, 0xd2, 0x4c, 0xac, 0x03, 0xcd, 0x1c, 0x47, 0x93, 0x54, 0x04, 0x26, 0x4e, 0x49, 0x23,
	0x40, 0xb6, 0x6e, 0xdb, 0x22, 0xb2, 0x1b, 0x08, 0xf5, 0xd2, 0x07, 0x1e, 0x4a, 0x3a, 0xcb, 0xb5,
	0x1e, 0xe6, 0x5a, 0x67, 0x55, 0x04, 0xb9, 0xd6, 0x37, 0xcd, 0x46, 0xa4, 0x5b, 0x49, 0x68, 0x6a,
	0xbf, 0x2a, 0x10, 0x4c, 0xc6, 0x8f, 0x34, 0x98, 0xd1, 0xa1, 0x83, 0xc1, 0x37, 0x39, 0xda, 0x03,
	0x94, 0x76, 0x29, 0x97, 0x96, 0x11, 0x70, 0xb8, 0xe7, 0x50, 0xa1, 0xb7, 0xf5, 0x9b, 0xac, 0xea,
	0xfa, 0x27, 0xeb, 0x63, 0x34, 0x27, 0xd0, 0x80, 0xe0, 0x2e, 0xa3, 0x89, 0x66, 0xb4, 0x08, 0x9b,
	0x38, 0x9b, 0x8a, 0x0c, 0xde, 0x42, 0x58, 0x3d, 0x71, 0x6d, 0x0b, 0x50, 0xe8, 0xc6, 0xa5, 0x50,
	0xf6, 0x2b, 0x3b, 0x3f, 0x29, 0x40, 0xcf, 0x3b, 0x11, 0xd3, 0x8f, 0x0e, 0x41, 0xbf, 0x7f, 0x19,
	0x31, 0xd0, 0x89, 0xde, 0xfe, 0xde, 0xa2, 0xe7, 0xbd, 0x7f, 0x42, 0xee, 0x26, 0x53, 0x18, 0x29,
	0x40, 0x44, 0x97, 0xd0, 0xe1, 0x26, 0xac, 0xc1, 0xae, 0xcd, 0xa4, 0x02, 0x62, 0x2f, 0x21, 0x9e,
	0x58, 0x58, 0x33, 0x81, 0x82, 0xee, 0x13, 0x4f, 0xb1, 0x5f, 0xb9, 0x78, 0xaa, 0x24, 0x13, 0xde,
	0x17, 0x7c, 0x74, 0x60, 0xf0, 0x97, 0x94, 0x87, 0xeb, 0xdb, 0x43, 0xe6, 0x21, 0x52, 0x48, 0x86,
	0xc3, 0xd6, 0x24, 0x79, 0x60, 0x2f, 0x7b, 0xe1, 0xb0, 0x67, 0x3e, 0x0f, 0x3c, 0xc5, 0xcb, 0xc9,
	0x43, 0x5f, 0xf0, 0xd1, 0x81, 0xc1, 0xf7, 0x2f, 0x0f, 0xef, 0xa2, 0x22, 0xa5, 0xdb, 0xe8, 0x56,
	0x48, 0x8d, 0xb4, 0x83, 0xec, 0xd5, 0x8d, 0xd1, 0xc1, 0xf0, 0x2b, 0x07, 0xd9, 0xa0, 0xff, 0x0f,
	0x53, 0xd4, 0xf0, 0x9c, 0x8e, 0x4b, 0x3d, 0x4f, 0x54, 0xd8, 0x83, 0xf6, 0x16, 0x9a, 0x97, 0xda,
	0x82, 0x80, 0x67, 0xd1, 0xf8, 0x23, 0xc7, 0xee, 0xc4, 0xe6, 0xe0, 0x49, 0x7b, 0x0f, 0x3e, 0x1f,
	0x91, 0x6a, 0xf6, 0xae, 0xdc, 0xea, 0x74, 0xe1, 0xd2, 0x9b, 0xa8, 0xb0, 0x87, 0xd0, 0x98, 0x4f,
	0x6c, 0x9b, 0x78, 0x80, 0x01, 0x4f, 0xda, 0x45, 0xf8, 0x46, 0x64, 0x8c, 0xe5, 0x40, 0xdc, 0x40,
	0x2a, 0xa7, 0xc7, 0x1f, 0xcc, 0xc1, 0xf7, 0xe1, 0x8d, 0x54, 0x30, 0xa9, 0xc3, 0x37, 0xa8, 0x7b,
	0xbe, 0x1e, 0xf7, 0xee, 0x3e, 0x55, 0x73, 0x32, 0xf7, 0xb7, 0xd1, 0x69, 0x50, 0xbb, 0xe6, 0xb4,
	0x88, 0x1f, 0x58, 0x35, 0x96, 0xbf, 0xbb, 0x4d, 0xd3, 0xdb, 0x43, 0x31, 0x5c, 0x46, 0x5a, 0x3f,
	0x73, 0x00, 0x33, 0x8d, 0xc6, 0x1e, 0x99, 0x76, 0x27, 0x32, 0xc8, 0x1e, 0xb4, 0xeb, 0xf0, 0x19,
	0xd9, 0xe8, 0x5e, 0x75, 0x5a, 0x2e, 0x09, 0xac, 0xb0, 0x54, 0x87, 0x47, 0x58, 0x8b, 0x37, 0x94,
	0x33, 0xd3, 0xd7, 0xf5, 0x2d, 0xf4, 0x0a, 0xe8, 0x7c, 0xe8, 0x99, 0x75, 0x72, 0x8d, 0xb8, 0xa4,
	0x5d, 0x27, 0xed, 0x5a, 0x77, 0x78, 0xf7, 0x17, 0xe3, 0xa3, 0x95, 0x31, 0xd5, 0x17, 0x61, 0x1d,
	0xcd, 0x80, 0xde, 0x9d, 0x8e, 0x69, 0x5b, 0xc1, 0x1e, 0x5c, 0xeb, 0x68, 0x36, 0x6d, 0xa2, 0xaf,
	0xcb, 0x9b, 0x71, 0xc9, 0x6c, 0x7a, 0x4e, 0x40, 0x6a, 0xe1, 0x46, 0x59, 0x7e, 0x6b, 0x78, 0xc7,
	0x17, 0xe2, 0xa3, 0x97, 0x32, 0x34, 0x60, 0xc4, 0x77, 0x3b, 0xb5, 0x1a, 0xf1, 0xfd, 0xff, 0x12,
	0x71, 0x6c, 0x62, 0xc0, 0x12, 0x5b, 0xb7, 0xed, 0x8f, 0xc2, 0x25, 0xff, 0x83, 0xfb, 0xc3, 0xbb,
	0xfd, 0xe7, 0x40, 0x5c, 0x63, 0x9c, 0x1d, 0xf0, 0xbd, 0x8c, 0xfe, 0xef, 0xa5, 0xae, 0x42, 0x30,
	0x9a, 0x59, 0xc7, 0x1a, 0x3a, 0xe2, 0x25, 0xae, 0x0b, 0xf0, 0xc3, 0xad, 0xf5, 0x64, 0xe0, 0x9b,
	0x31, 0x9a, 0x94, 0x81, 0x4f, 0xc3, 0x39, 0x34, 0x55, 0xcf, 0x9e, 0xb8, 0xc2, 0x41, 0x2a, 0x2a,
	0x7a, 0x85, 0x17, 0xd0, 0x64, 0xad, 0x77, 0x40, 0x0a, 0x63, 0x54, 0x32, 0xb9, 0x84, 0xcb, 0xe8,
	0x58, 0xc0, 0xd7, 0x70, 0x61, 0x9c, 0x4a, 0xa5, 0x97, 0x71, 0x01, 0x1d, 0x7a, 0xc8, 0x4a, 0xae,
	0x70, 0x88, 0x4a, 0x44, 0x8f, 0x78, 0x11, 0x1d, 0x75, 0x93, 0x35, 0x51, 0x38, 0x4c, 0xdf, 0xf3,
	0x8b, 0xa1, 0xbe, 0xcf, 0x12, 0x58, 0x98, 0x60, 0xfa, 0xf0, 0x18, 0xf7, 0xd2, 0x74, 0xa7, 0xdf,
	0x0f, 0xe7, 0xae, 0x5e, 0xc2, 0xe2, 0xe4, 0x28, 0xc9, 0xe4, 0xdc, 0x4b, 0xe6, 0x38, 0xd6, 0x80,
	0xd4, 0xbc, 0x83, 0x8e, 0x24, 0xd7, 0x25, 0x83, 0x42, 0x42, 0x91, 0x13, 0x5f, 0xdb, 0x3d, 0x81,
	0xc6, 0xa8, 0x71, 0xdc, 0x44, 0xe3, 0x6c, 0x56, 0xc3, 0xf3, 0x9c, 0x72, 0x76, 0x10, 0x54, 0x17,
	0xe4, 0x02, 0x8c, 0x4a, 0x3b, 0xf9, 0xd9, 0xef, 0x7f, 0x7f, 0x7b, 0x60, 0x06, 0x4f, 0x19, 0x6c,
	0xcc, 0x4c, 0x4e, 0xb8, 0xf8, 0x6b, 0x25, 0x64, 0x4e, 0x94, 0x4c, 0x39, 0x6b, 0x4f, 0x3c, 0x19,
	0xaa, 0xaf, 0x0d, 0x20, 0x09, 0x08, 0xcb, 0x14, 0x61, 0x11, 0x6b, 0x1c, 0x02, 0x37, 0x50, 0x1b,
	0x4f, 0x68, 0x4f, 0xb6, 0x83, 0xbf, 0x54, 0xd0, 0xb1, 0xa4, 0x91, 0x75, 0xdb, 0x16, 0x41, 0x89,
	0x87, 0x42, 0x11, 0x94, 0x64, 0xac, 0xd3, 0x34, 0x0a, 0x75, 0x0a, 0xab, 0x72, 0x28, 0xfc, 0xb9,
	0x82, 0x26, 0xe2, 0x11, 0x02, 0x9f, 0x91, 0x44, 0xcc, 0x77, 0x16, 0x6a, 0x29, 0x4f, 0x0c, 0x00,
	0x96, 0x28, 0xc0, 0x69, 0x3c, 0x9f, 0x06, 0x80, 0xdf, 0x12, 0xe2, 0x2d, 0xf9, 0x24, 0xcc, 0x11,
	0x68, 0x87, 0xdb, 0x71, 0x46, 0x12, 0x64, 0x3e, 0x87, 0x68, 0x88, 0xd2, 0xe6, 0x29, 0xc7, 0x1c,
	0x3e, 0x21, 0xe1, 0xc0, 0x9f, 0xa2, 0xc3, 0x51, 0xf7, 0x8e, 0x17, 0x25, 0xc1, 0x71, 0x8d, 0x8d,
	0x7a, 0x26, 0x47, 0x0a, 0x3c, 0x97, 0xa8, 0xe7, 0x05, 0x5c, 0x4c, 0x7b, 0x66, 0xbf, 0x9a, 0xc4,
	0x1b, 0xf0, 0x18, 0x4d, 0x46, 0xba, 0x61, 0xfc, 0x8b, 0x92, 0xc0, 0x72, 0x19, 0x04, 0x73, 0x8b,
	0x56, 0xa4, 0x0c, 0x05, 0x3c, 0x2b, 0x66, 0x60, 0xc1, 0xc3, 0x3d, 0x28, 0x0b, 0x9e, 0x6b, 0xab,
	0xa4, 0xc1, 0xf3, 0x4d, 0x93, 0x3c, 0x78, 0xf6, 0xdb, 0x10, 0x1f, 0x3c, 0xd3, 0xed, 0x17, 0x7c,
	0x2e, 0x83, 0x60, 0x58, 0x90, 0x07, 0xcf, 0x18, 0xf0, 0x2f, 0x0a, 0xc2, 0xd9, 0xd6, 0x1b, 0x9f,
	0xcd, 0x5a, 0x97, 0x36, 0xfb, 0xea, 0xca, 0x60, 0xc2, 0x40, 0xf4, 0x26, 0x25, 0x5a, 0xc3, 0xe7,
	0xd2, 0x44, 0xec, 0x83, 0xc4, 0xdd, 0x18, 0xe1, 0x47, 0x74, 0xc7, 0x78, 0x42, 0x6f, 0xe6, 0x1d,
	0xfc, 0x23, 0xbd, 0x38, 0xb8, 0xf6, 0x5c, 0x74, 0x71, 0x88, 0xc7, 0x01, 0xd1, 0xc5, 0x21, 0xe9,
	0xf5, 0xb5, 0x4b, 0x14, 0x71, 0x15, 0x1b, 0x12, 0xc4, 0xf8, 0xf8, 0xd2, 0x91, 0x62, 0xc7, 0x78,
	0xc2, 0x66, 0x88, 0x1d, 0xfc, 0x83, 0x82, 0xfe, 0xc7, 0x37, 0xf0, 0x78, 0x49, 0xee, 0x96, 0xaf,
	0xe6, 0x72, 0xbe, 0x20, 0xe0, 0x5d, 0xa0, 0x78, 0x3a, 0x5e, 0x91, 0xe0, 0x45, 0x67, 0x8b, 0xdf,
	0xbd, 0x24, 0x1b, 0x54, 0x7b, 0x1f, 0x36, 0xbe, 0xd8, 0xca, 0xf9, 0x82, 0x03, 0xb2, 0x45, 0xa5,
	0xcf, 0xb3, 0xfd, 0xa6, 0xa0, 0x19, 0x61, 0xcf, 0x8f, 0x75, 0x91, 0x67, 0xf9, 0xac, 0xa1, 0x1a,
	0x03, 0xcb, 0x03, 0xf0, 0xdb, 0x14, 0xf8, 0x22, 0xbe, 0x90, 0x06, 0x8e, 0x9a, 0x1e, 0x28, 0xc8,
	0xaa, 0x1f, 0xaa, 0xa5, 0xc1, 0xbf, 0x53, 0xd0, 0x51, 0x6e, 0x52, 0xc0, 0x25, 0x11, 0x40, 0x76,
	0x22, 0x51, 0x97, 0x72, 0xe5, 0x00, 0x70, 0x8d, 0x02, 0xae, 0xe0, 0xe5, 0x34, 0x60, 0xa2, 0xd7,
	0x4a, 0x63, 0xfd, 0xac, 0xa0, 0xe3, 0x99, 0x09, 0x02, 0x2f, 0x8b, 0x5c, 0x8a, 0x27, 0x16, 0xf5,
	0xec, 0x40, 0xb2, 0x79, 0xe7, 0x85, 0x36, 0x7a, 0xd5, 0x7a, 0xac, 0x91, 0xe6, 0xfc, 0x82, 0x7e,
	0x7d, 0x61, 0xdc, 0xc0, 0x9a, 0xc8, 0x27, 0x3f, 0xce, 0xa8, 0xaf, 0xf6, 0x95, 0x01, 0x1e, 0x9d,
	0xf2, 0x94, 0x71, 0x29, 0xcd, 0x03, 0x6d, 0x65, 0x1a, 0xe3, 0x29, 0xbd, 0x58, 0xb8, 0xe1, 0x43,
	0x7c, 0xb1, 0x88, 0x06, 0x1d, 0xf1, 0xc5, 0x22, 0x9c, 0x64, 0xe4, 0xa7, 0x83, 0xeb, 0x67, 0xc5,
	0xbb, 0x04, 0x23, 0x8a, 0x78, 0x97, 0xf8, 0x11, 0x48, 0xbc, 0x4b, 0xa9, 0x19, 0x47, 0xbe, 0x4b,
	0xd0, 0x3c, 0xa7, 0x31, 0xbe, 0xa7, 0xb5, 0x9e, 0x98, 0x58, 0xc4, 0xb5, 0x9e, 0x1d, 0x8d, 0xc4,
	0xb5, 0x2e, 0x18, 0x7d, 0xe4, 0xfb, 0x63, 0xda, 0x76, 0x95, 0xce, 0x60, 0x7e, 0xd5, 0xb9, 0x9f,
	0x06, 0xfb, 0x4a, 0xe1, 0xdb, 0x72, 0x51, 0xfb, 0x24, 0x18, 0x00, 0xd4, 0x52, 0x9e, 0x18, 0x50,
	0xad, 0x50, 0xaa, 0x12, 0x5e, 0x14, 0x51, 0x45, 0x7f, 0xcc, 0x89, 0x68, 0xae, 0xbc, 0xfe, 0x6c,
	0xb7, 0xa8, 0x3c, 0xdf, 0x2d, 0x2a, 0x7f, 0xed, 0x16, 0x95, 0x6f, 0x5e, 0x14, 0x47, 0x9e, 0xbf,
	0x28, 0x8e, 0xfc, 0xf1, 0xa2, 0x38, 0x72, 0x6f, 0x8a, 0x29, 0x6e, 0x83, 0x81, 0xa0, 0xeb, 0x12,
	0x7f, 0x6b, 0x9c, 0xfe, 0x11, 0xe8, 0xfc, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x84, 0x1e, 0x1a,
	0x07, 0x18, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a HyMarketsize by index.
	HyMarketsize(ctx context.Context, in *QueryGetHyMarketsizeRequest, opts ...grpc.CallOption) (*QueryGetHyMarketsizeResponse, error)
	// Queries a list of HyMarketsize items.
	HyMarketsizeAll(ctx context.Context, in *QueryAllHyMarketsizeRequest, opts ...grpc.CallOption) (*QueryAllHyMarketsizeResponse, error)
	// Queries a HyPartner by index.
	HyPartner(ctx context.Context, in *QueryGetHyPartnerRequest, opts ...grpc.CallOption) (*QueryGetHyPartnerResponse, error)
	// Queries a list of HyPartner items.
	HyPartnerAll(ctx context.Context, in *QueryAllHyPartnerRequest, opts ...grpc.CallOption) (*QueryAllHyPartnerResponse, error)
	// Queries a HyImport by index.
	HyImport(ctx context.Context, in *QueryGetHyImportRequest, opts ...grpc.CallOption) (*QueryGetHyImportResponse, error)
	// Queries a list of HyImport items.
	HyImportAll(ctx context.Context, in *QueryAllHyImportRequest, opts ...grpc.CallOption) (*QueryAllHyImportResponse, error)
	// Queries a HyExport by index.
	HyExport(ctx context.Context, in *QueryGetHyExportRequest, opts ...grpc.CallOption) (*QueryGetHyExportResponse, error)
	// Queries a list of HyExport items.
	HyExportAll(ctx context.Context, in *QueryAllHyExportRequest, opts ...grpc.CallOption) (*QueryAllHyExportResponse, error)
	// Queries a list of HyRecentMarketsize items.
	HyRecentMarketsize(ctx context.Context, in *QueryHyRecentMarketsizeRequest, opts ...grpc.CallOption) (*QueryHyRecentMarketsizeResponse, error)
	// Queries a list of HyRecentPartner items.
	HyRecentPartner(ctx context.Context, in *QueryHyRecentPartnerRequest, opts ...grpc.CallOption) (*QueryHyRecentPartnerResponse, error)
	// Queries a list of HyRecentImport items.
	HyRecentImport(ctx context.Context, in *QueryHyRecentImportRequest, opts ...grpc.CallOption) (*QueryHyRecentImportResponse, error)
	// Queries a list of HyRecentExport items.
	HyRecentExport(ctx context.Context, in *QueryHyRecentExportRequest, opts ...grpc.CallOption) (*QueryHyRecentExportResponse, error)
	// Queries a list of HyDomesticMarketShare items.
	HyDomesticMarketShare(ctx context.Context, in *QueryHyDomesticMarketShareRequest, opts ...grpc.CallOption) (*QueryHyDomesticMarketShareResponse, error)
	// Queries a list of HyCompetition items.
	HyCompetition(ctx context.Context, in *QueryHyCompetitionRequest, opts ...grpc.CallOption) (*QueryHyCompetitionResponse, error)
	// Queries a list of HyTradeDependency items.
	HyTradeDependency(ctx context.Context, in *QueryHyTradeDependencyRequest, opts ...grpc.CallOption) (*QueryHyTradeDependencyResponse, error)
	// Queries a list of HyQuality items.
	HyQuality(ctx context.Context, in *QueryHyQualityRequest, opts ...grpc.CallOption) (*QueryHyQualityResponse, error)
	// Queries a list of HyProtectionism items.
	HyProtectionism(ctx context.Context, in *QueryHyProtectionismRequest, opts ...grpc.CallOption) (*QueryHyProtectionismResponse, error)
	// Queries a list of HySuccess items.
	HySuccess(ctx context.Context, in *QueryHySuccessRequest, opts ...grpc.CallOption) (*QueryHySuccessResponse, error)
	// Queries a list of HyAllValuesOf items.
	HyAllValuesOf(ctx context.Context, in *QueryHyAllValuesOfRequest, opts ...grpc.CallOption) (*QueryHyAllValuesOfResponse, error)
	// Queries a list of HyAllNamesOf items.
	HyAllNamesOf(ctx context.Context, in *QueryHyAllNamesOfRequest, opts ...grpc.CallOption) (*QueryHyAllNamesOfResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyMarketsize(ctx context.Context, in *QueryGetHyMarketsizeRequest, opts ...grpc.CallOption) (*QueryGetHyMarketsizeResponse, error) {
	out := new(QueryGetHyMarketsizeResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyMarketsize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyMarketsizeAll(ctx context.Context, in *QueryAllHyMarketsizeRequest, opts ...grpc.CallOption) (*QueryAllHyMarketsizeResponse, error) {
	out := new(QueryAllHyMarketsizeResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyMarketsizeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyPartner(ctx context.Context, in *QueryGetHyPartnerRequest, opts ...grpc.CallOption) (*QueryGetHyPartnerResponse, error) {
	out := new(QueryGetHyPartnerResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyPartnerAll(ctx context.Context, in *QueryAllHyPartnerRequest, opts ...grpc.CallOption) (*QueryAllHyPartnerResponse, error) {
	out := new(QueryAllHyPartnerResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyPartnerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyImport(ctx context.Context, in *QueryGetHyImportRequest, opts ...grpc.CallOption) (*QueryGetHyImportResponse, error) {
	out := new(QueryGetHyImportResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyImportAll(ctx context.Context, in *QueryAllHyImportRequest, opts ...grpc.CallOption) (*QueryAllHyImportResponse, error) {
	out := new(QueryAllHyImportResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyImportAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyExport(ctx context.Context, in *QueryGetHyExportRequest, opts ...grpc.CallOption) (*QueryGetHyExportResponse, error) {
	out := new(QueryGetHyExportResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyExportAll(ctx context.Context, in *QueryAllHyExportRequest, opts ...grpc.CallOption) (*QueryAllHyExportResponse, error) {
	out := new(QueryAllHyExportResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyExportAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyRecentMarketsize(ctx context.Context, in *QueryHyRecentMarketsizeRequest, opts ...grpc.CallOption) (*QueryHyRecentMarketsizeResponse, error) {
	out := new(QueryHyRecentMarketsizeResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyRecentMarketsize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyRecentPartner(ctx context.Context, in *QueryHyRecentPartnerRequest, opts ...grpc.CallOption) (*QueryHyRecentPartnerResponse, error) {
	out := new(QueryHyRecentPartnerResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyRecentPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyRecentImport(ctx context.Context, in *QueryHyRecentImportRequest, opts ...grpc.CallOption) (*QueryHyRecentImportResponse, error) {
	out := new(QueryHyRecentImportResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyRecentImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyRecentExport(ctx context.Context, in *QueryHyRecentExportRequest, opts ...grpc.CallOption) (*QueryHyRecentExportResponse, error) {
	out := new(QueryHyRecentExportResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyRecentExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyDomesticMarketShare(ctx context.Context, in *QueryHyDomesticMarketShareRequest, opts ...grpc.CallOption) (*QueryHyDomesticMarketShareResponse, error) {
	out := new(QueryHyDomesticMarketShareResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyDomesticMarketShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyCompetition(ctx context.Context, in *QueryHyCompetitionRequest, opts ...grpc.CallOption) (*QueryHyCompetitionResponse, error) {
	out := new(QueryHyCompetitionResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyCompetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyTradeDependency(ctx context.Context, in *QueryHyTradeDependencyRequest, opts ...grpc.CallOption) (*QueryHyTradeDependencyResponse, error) {
	out := new(QueryHyTradeDependencyResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyTradeDependency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyQuality(ctx context.Context, in *QueryHyQualityRequest, opts ...grpc.CallOption) (*QueryHyQualityResponse, error) {
	out := new(QueryHyQualityResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyQuality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyProtectionism(ctx context.Context, in *QueryHyProtectionismRequest, opts ...grpc.CallOption) (*QueryHyProtectionismResponse, error) {
	out := new(QueryHyProtectionismResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyProtectionism", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HySuccess(ctx context.Context, in *QueryHySuccessRequest, opts ...grpc.CallOption) (*QueryHySuccessResponse, error) {
	out := new(QueryHySuccessResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HySuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyAllValuesOf(ctx context.Context, in *QueryHyAllValuesOfRequest, opts ...grpc.CallOption) (*QueryHyAllValuesOfResponse, error) {
	out := new(QueryHyAllValuesOfResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyAllValuesOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyAllNamesOf(ctx context.Context, in *QueryHyAllNamesOfRequest, opts ...grpc.CallOption) (*QueryHyAllNamesOfResponse, error) {
	out := new(QueryHyAllNamesOfResponse)
	err := c.cc.Invoke(ctx, "/khidi.khidi.Query/HyAllNamesOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a HyMarketsize by index.
	HyMarketsize(context.Context, *QueryGetHyMarketsizeRequest) (*QueryGetHyMarketsizeResponse, error)
	// Queries a list of HyMarketsize items.
	HyMarketsizeAll(context.Context, *QueryAllHyMarketsizeRequest) (*QueryAllHyMarketsizeResponse, error)
	// Queries a HyPartner by index.
	HyPartner(context.Context, *QueryGetHyPartnerRequest) (*QueryGetHyPartnerResponse, error)
	// Queries a list of HyPartner items.
	HyPartnerAll(context.Context, *QueryAllHyPartnerRequest) (*QueryAllHyPartnerResponse, error)
	// Queries a HyImport by index.
	HyImport(context.Context, *QueryGetHyImportRequest) (*QueryGetHyImportResponse, error)
	// Queries a list of HyImport items.
	HyImportAll(context.Context, *QueryAllHyImportRequest) (*QueryAllHyImportResponse, error)
	// Queries a HyExport by index.
	HyExport(context.Context, *QueryGetHyExportRequest) (*QueryGetHyExportResponse, error)
	// Queries a list of HyExport items.
	HyExportAll(context.Context, *QueryAllHyExportRequest) (*QueryAllHyExportResponse, error)
	// Queries a list of HyRecentMarketsize items.
	HyRecentMarketsize(context.Context, *QueryHyRecentMarketsizeRequest) (*QueryHyRecentMarketsizeResponse, error)
	// Queries a list of HyRecentPartner items.
	HyRecentPartner(context.Context, *QueryHyRecentPartnerRequest) (*QueryHyRecentPartnerResponse, error)
	// Queries a list of HyRecentImport items.
	HyRecentImport(context.Context, *QueryHyRecentImportRequest) (*QueryHyRecentImportResponse, error)
	// Queries a list of HyRecentExport items.
	HyRecentExport(context.Context, *QueryHyRecentExportRequest) (*QueryHyRecentExportResponse, error)
	// Queries a list of HyDomesticMarketShare items.
	HyDomesticMarketShare(context.Context, *QueryHyDomesticMarketShareRequest) (*QueryHyDomesticMarketShareResponse, error)
	// Queries a list of HyCompetition items.
	HyCompetition(context.Context, *QueryHyCompetitionRequest) (*QueryHyCompetitionResponse, error)
	// Queries a list of HyTradeDependency items.
	HyTradeDependency(context.Context, *QueryHyTradeDependencyRequest) (*QueryHyTradeDependencyResponse, error)
	// Queries a list of HyQuality items.
	HyQuality(context.Context, *QueryHyQualityRequest) (*QueryHyQualityResponse, error)
	// Queries a list of HyProtectionism items.
	HyProtectionism(context.Context, *QueryHyProtectionismRequest) (*QueryHyProtectionismResponse, error)
	// Queries a list of HySuccess items.
	HySuccess(context.Context, *QueryHySuccessRequest) (*QueryHySuccessResponse, error)
	// Queries a list of HyAllValuesOf items.
	HyAllValuesOf(context.Context, *QueryHyAllValuesOfRequest) (*QueryHyAllValuesOfResponse, error)
	// Queries a list of HyAllNamesOf items.
	HyAllNamesOf(context.Context, *QueryHyAllNamesOfRequest) (*QueryHyAllNamesOfResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) HyMarketsize(ctx context.Context, req *QueryGetHyMarketsizeRequest) (*QueryGetHyMarketsizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyMarketsize not implemented")
}
func (*UnimplementedQueryServer) HyMarketsizeAll(ctx context.Context, req *QueryAllHyMarketsizeRequest) (*QueryAllHyMarketsizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyMarketsizeAll not implemented")
}
func (*UnimplementedQueryServer) HyPartner(ctx context.Context, req *QueryGetHyPartnerRequest) (*QueryGetHyPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyPartner not implemented")
}
func (*UnimplementedQueryServer) HyPartnerAll(ctx context.Context, req *QueryAllHyPartnerRequest) (*QueryAllHyPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyPartnerAll not implemented")
}
func (*UnimplementedQueryServer) HyImport(ctx context.Context, req *QueryGetHyImportRequest) (*QueryGetHyImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyImport not implemented")
}
func (*UnimplementedQueryServer) HyImportAll(ctx context.Context, req *QueryAllHyImportRequest) (*QueryAllHyImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyImportAll not implemented")
}
func (*UnimplementedQueryServer) HyExport(ctx context.Context, req *QueryGetHyExportRequest) (*QueryGetHyExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyExport not implemented")
}
func (*UnimplementedQueryServer) HyExportAll(ctx context.Context, req *QueryAllHyExportRequest) (*QueryAllHyExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyExportAll not implemented")
}
func (*UnimplementedQueryServer) HyRecentMarketsize(ctx context.Context, req *QueryHyRecentMarketsizeRequest) (*QueryHyRecentMarketsizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyRecentMarketsize not implemented")
}
func (*UnimplementedQueryServer) HyRecentPartner(ctx context.Context, req *QueryHyRecentPartnerRequest) (*QueryHyRecentPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyRecentPartner not implemented")
}
func (*UnimplementedQueryServer) HyRecentImport(ctx context.Context, req *QueryHyRecentImportRequest) (*QueryHyRecentImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyRecentImport not implemented")
}
func (*UnimplementedQueryServer) HyRecentExport(ctx context.Context, req *QueryHyRecentExportRequest) (*QueryHyRecentExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyRecentExport not implemented")
}
func (*UnimplementedQueryServer) HyDomesticMarketShare(ctx context.Context, req *QueryHyDomesticMarketShareRequest) (*QueryHyDomesticMarketShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyDomesticMarketShare not implemented")
}
func (*UnimplementedQueryServer) HyCompetition(ctx context.Context, req *QueryHyCompetitionRequest) (*QueryHyCompetitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyCompetition not implemented")
}
func (*UnimplementedQueryServer) HyTradeDependency(ctx context.Context, req *QueryHyTradeDependencyRequest) (*QueryHyTradeDependencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyTradeDependency not implemented")
}
func (*UnimplementedQueryServer) HyQuality(ctx context.Context, req *QueryHyQualityRequest) (*QueryHyQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyQuality not implemented")
}
func (*UnimplementedQueryServer) HyProtectionism(ctx context.Context, req *QueryHyProtectionismRequest) (*QueryHyProtectionismResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyProtectionism not implemented")
}
func (*UnimplementedQueryServer) HySuccess(ctx context.Context, req *QueryHySuccessRequest) (*QueryHySuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HySuccess not implemented")
}
func (*UnimplementedQueryServer) HyAllValuesOf(ctx context.Context, req *QueryHyAllValuesOfRequest) (*QueryHyAllValuesOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyAllValuesOf not implemented")
}
func (*UnimplementedQueryServer) HyAllNamesOf(ctx context.Context, req *QueryHyAllNamesOfRequest) (*QueryHyAllNamesOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyAllNamesOf not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyMarketsize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHyMarketsizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyMarketsize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyMarketsize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyMarketsize(ctx, req.(*QueryGetHyMarketsizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyMarketsizeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHyMarketsizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyMarketsizeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyMarketsizeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyMarketsizeAll(ctx, req.(*QueryAllHyMarketsizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHyPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyPartner(ctx, req.(*QueryGetHyPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyPartnerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHyPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyPartnerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyPartnerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyPartnerAll(ctx, req.(*QueryAllHyPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHyImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyImport(ctx, req.(*QueryGetHyImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyImportAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHyImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyImportAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyImportAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyImportAll(ctx, req.(*QueryAllHyImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHyExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyExport(ctx, req.(*QueryGetHyExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyExportAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHyExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyExportAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyExportAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyExportAll(ctx, req.(*QueryAllHyExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyRecentMarketsize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyRecentMarketsizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyRecentMarketsize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyRecentMarketsize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyRecentMarketsize(ctx, req.(*QueryHyRecentMarketsizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyRecentPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyRecentPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyRecentPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyRecentPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyRecentPartner(ctx, req.(*QueryHyRecentPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyRecentImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyRecentImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyRecentImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyRecentImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyRecentImport(ctx, req.(*QueryHyRecentImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyRecentExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyRecentExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyRecentExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyRecentExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyRecentExport(ctx, req.(*QueryHyRecentExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyDomesticMarketShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyDomesticMarketShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyDomesticMarketShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyDomesticMarketShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyDomesticMarketShare(ctx, req.(*QueryHyDomesticMarketShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyCompetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyCompetition(ctx, req.(*QueryHyCompetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyTradeDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyTradeDependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyTradeDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyTradeDependency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyTradeDependency(ctx, req.(*QueryHyTradeDependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyQualityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyQuality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyQuality(ctx, req.(*QueryHyQualityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyProtectionism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyProtectionismRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyProtectionism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyProtectionism",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyProtectionism(ctx, req.(*QueryHyProtectionismRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HySuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHySuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HySuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HySuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HySuccess(ctx, req.(*QueryHySuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyAllValuesOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyAllValuesOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyAllValuesOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyAllValuesOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyAllValuesOf(ctx, req.(*QueryHyAllValuesOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyAllNamesOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHyAllNamesOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyAllNamesOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khidi.khidi.Query/HyAllNamesOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyAllNamesOf(ctx, req.(*QueryHyAllNamesOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "khidi.khidi.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "HyMarketsize",
			Handler:    _Query_HyMarketsize_Handler,
		},
		{
			MethodName: "HyMarketsizeAll",
			Handler:    _Query_HyMarketsizeAll_Handler,
		},
		{
			MethodName: "HyPartner",
			Handler:    _Query_HyPartner_Handler,
		},
		{
			MethodName: "HyPartnerAll",
			Handler:    _Query_HyPartnerAll_Handler,
		},
		{
			MethodName: "HyImport",
			Handler:    _Query_HyImport_Handler,
		},
		{
			MethodName: "HyImportAll",
			Handler:    _Query_HyImportAll_Handler,
		},
		{
			MethodName: "HyExport",
			Handler:    _Query_HyExport_Handler,
		},
		{
			MethodName: "HyExportAll",
			Handler:    _Query_HyExportAll_Handler,
		},
		{
			MethodName: "HyRecentMarketsize",
			Handler:    _Query_HyRecentMarketsize_Handler,
		},
		{
			MethodName: "HyRecentPartner",
			Handler:    _Query_HyRecentPartner_Handler,
		},
		{
			MethodName: "HyRecentImport",
			Handler:    _Query_HyRecentImport_Handler,
		},
		{
			MethodName: "HyRecentExport",
			Handler:    _Query_HyRecentExport_Handler,
		},
		{
			MethodName: "HyDomesticMarketShare",
			Handler:    _Query_HyDomesticMarketShare_Handler,
		},
		{
			MethodName: "HyCompetition",
			Handler:    _Query_HyCompetition_Handler,
		},
		{
			MethodName: "HyTradeDependency",
			Handler:    _Query_HyTradeDependency_Handler,
		},
		{
			MethodName: "HyQuality",
			Handler:    _Query_HyQuality_Handler,
		},
		{
			MethodName: "HyProtectionism",
			Handler:    _Query_HyProtectionism_Handler,
		},
		{
			MethodName: "HySuccess",
			Handler:    _Query_HySuccess_Handler,
		},
		{
			MethodName: "HyAllValuesOf",
			Handler:    _Query_HyAllValuesOf_Handler,
		},
		{
			MethodName: "HyAllNamesOf",
			Handler:    _Query_HyAllNamesOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "khidi/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetHyMarketsizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyMarketsizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyMarketsizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyMarketsizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyMarketsizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyMarketsizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HyMarketsize.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHyMarketsizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHyMarketsizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHyMarketsizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHyMarketsizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHyMarketsizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHyMarketsizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HyMarketsize) > 0 {
		for iNdEx := len(m.HyMarketsize) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HyMarketsize[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyPartnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyPartnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyPartnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyPartnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyPartnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyPartnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HyPartner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHyPartnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHyPartnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHyPartnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHyPartnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHyPartnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHyPartnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HyPartner) > 0 {
		for iNdEx := len(m.HyPartner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HyPartner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyImportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyImportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyImportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyImportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyImportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyImportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HyImport.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHyImportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHyImportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHyImportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHyImportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHyImportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHyImportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HyImport) > 0 {
		for iNdEx := len(m.HyImport) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HyImport[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyExportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyExportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyExportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyExportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyExportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyExportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HyExport.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHyExportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHyExportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHyExportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHyExportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHyExportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHyExportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HyExport) > 0 {
		for iNdEx := len(m.HyExport) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HyExport[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyRecentMarketsizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyRecentMarketsizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyRecentMarketsizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyRecentMarketsizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyRecentMarketsizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyRecentMarketsizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Volume) > 0 {
		i -= len(m.Volume)
		copy(dAtA[i:], m.Volume)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Volume)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyRecentPartnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyRecentPartnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyRecentPartnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyRecentPartnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyRecentPartnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyRecentPartnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Volume) > 0 {
		i -= len(m.Volume)
		copy(dAtA[i:], m.Volume)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Volume)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyRecentImportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyRecentImportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyRecentImportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyRecentImportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyRecentImportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyRecentImportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Volume) > 0 {
		i -= len(m.Volume)
		copy(dAtA[i:], m.Volume)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Volume)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyRecentExportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyRecentExportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyRecentExportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyRecentExportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyRecentExportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyRecentExportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Volume) > 0 {
		i -= len(m.Volume)
		copy(dAtA[i:], m.Volume)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Volume)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyDomesticMarketShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyDomesticMarketShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyDomesticMarketShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyDomesticMarketShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyDomesticMarketShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyDomesticMarketShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyCompetitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyCompetitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyCompetitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyCompetitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyCompetitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyCompetitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyTradeDependencyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyTradeDependencyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyTradeDependencyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyTradeDependencyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyTradeDependencyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyTradeDependencyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyQualityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyQualityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyQualityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyQualityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyQualityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyQualityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyProtectionismRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyProtectionismRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyProtectionismRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyProtectionismResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyProtectionismResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyProtectionismResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHySuccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHySuccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHySuccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHySuccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHySuccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHySuccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyAllValuesOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyAllValuesOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyAllValuesOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyAllValuesOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyAllValuesOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyAllValuesOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Success) > 0 {
		i -= len(m.Success)
		copy(dAtA[i:], m.Success)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Success)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Protectionism) > 0 {
		i -= len(m.Protectionism)
		copy(dAtA[i:], m.Protectionism)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Protectionism)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Quality) > 0 {
		i -= len(m.Quality)
		copy(dAtA[i:], m.Quality)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Quality)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TradeDependency) > 0 {
		i -= len(m.TradeDependency)
		copy(dAtA[i:], m.TradeDependency)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TradeDependency)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Competition) > 0 {
		i -= len(m.Competition)
		copy(dAtA[i:], m.Competition)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Competition)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DomesticMarketShare) > 0 {
		i -= len(m.DomesticMarketShare)
		copy(dAtA[i:], m.DomesticMarketShare)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DomesticMarketShare)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecentExport) > 0 {
		i -= len(m.RecentExport)
		copy(dAtA[i:], m.RecentExport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecentExport)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecentImport) > 0 {
		i -= len(m.RecentImport)
		copy(dAtA[i:], m.RecentImport)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecentImport)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecentMarketsize) > 0 {
		i -= len(m.RecentMarketsize)
		copy(dAtA[i:], m.RecentMarketsize)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecentMarketsize)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyAllNamesOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyAllNamesOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyAllNamesOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHyAllNamesOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHyAllNamesOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHyAllNamesOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HyAllNamesOf) > 0 {
		for iNdEx := len(m.HyAllNamesOf) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HyAllNamesOf[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetHyMarketsizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHyMarketsizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HyMarketsize.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHyMarketsizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHyMarketsizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HyMarketsize) > 0 {
		for _, e := range m.HyMarketsize {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHyPartnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHyPartnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HyPartner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHyPartnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHyPartnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HyPartner) > 0 {
		for _, e := range m.HyPartner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHyImportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHyImportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HyImport.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHyImportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHyImportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HyImport) > 0 {
		for _, e := range m.HyImport {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHyExportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHyExportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HyExport.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHyExportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHyExportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HyExport) > 0 {
		for _, e := range m.HyExport {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyRecentMarketsizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyRecentMarketsizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyRecentPartnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyRecentPartnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyRecentImportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyRecentImportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyRecentExportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyRecentExportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyDomesticMarketShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyDomesticMarketShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyCompetitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyCompetitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyTradeDependencyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyTradeDependencyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyQualityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyQualityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyProtectionismRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyProtectionismResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHySuccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHySuccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyAllValuesOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyAllValuesOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecentMarketsize)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecentImport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecentExport)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DomesticMarketShare)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Competition)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TradeDependency)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Quality)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Protectionism)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Success)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyAllNamesOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHyAllNamesOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HyAllNamesOf) > 0 {
		for _, e := range m.HyAllNamesOf {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyMarketsizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyMarketsizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyMarketsizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyMarketsizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyMarketsizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyMarketsizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyMarketsize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HyMarketsize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHyMarketsizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHyMarketsizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHyMarketsizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHyMarketsizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHyMarketsizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHyMarketsizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyMarketsize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HyMarketsize = append(m.HyMarketsize, HyMarketsize{})
			if err := m.HyMarketsize[len(m.HyMarketsize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyPartnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyPartnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyPartnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyPartnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyPartnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyPartnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyPartner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HyPartner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHyPartnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHyPartnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHyPartnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHyPartnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHyPartnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHyPartnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyPartner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HyPartner = append(m.HyPartner, HyPartner{})
			if err := m.HyPartner[len(m.HyPartner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyImportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyImportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyImportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyImportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyImportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyImportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyImport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HyImport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHyImportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHyImportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHyImportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHyImportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHyImportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHyImportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyImport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HyImport = append(m.HyImport, HyImport{})
			if err := m.HyImport[len(m.HyImport)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyExportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyExportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyExportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyExportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyExportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyExportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyExport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HyExport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHyExportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHyExportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHyExportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHyExportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHyExportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHyExportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyExport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HyExport = append(m.HyExport, HyExport{})
			if err := m.HyExport[len(m.HyExport)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyRecentMarketsizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyRecentMarketsizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyRecentMarketsizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyRecentMarketsizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyRecentMarketsizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyRecentMarketsizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyRecentPartnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyRecentPartnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyRecentPartnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyRecentPartnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyRecentPartnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyRecentPartnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyRecentImportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyRecentImportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyRecentImportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyRecentImportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyRecentImportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyRecentImportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyRecentExportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyRecentExportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyRecentExportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyRecentExportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyRecentExportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyRecentExportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyDomesticMarketShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyDomesticMarketShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyDomesticMarketShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyDomesticMarketShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyDomesticMarketShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyDomesticMarketShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyCompetitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyCompetitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyCompetitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyCompetitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyCompetitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyCompetitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyTradeDependencyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyTradeDependencyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyTradeDependencyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyTradeDependencyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyTradeDependencyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyTradeDependencyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyQualityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyQualityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyQualityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyQualityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyQualityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyQualityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyProtectionismRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyProtectionismRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyProtectionismRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyProtectionismResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyProtectionismResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyProtectionismResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHySuccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHySuccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHySuccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHySuccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHySuccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHySuccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyAllValuesOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyAllValuesOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyAllValuesOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyAllValuesOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyAllValuesOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyAllValuesOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentMarketsize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentMarketsize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentImport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentImport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentExport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentExport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomesticMarketShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomesticMarketShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Competition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Competition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeDependency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeDependency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quality = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protectionism", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protectionism = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Success = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyAllNamesOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyAllNamesOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyAllNamesOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHyAllNamesOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHyAllNamesOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHyAllNamesOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyAllNamesOf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HyAllNamesOf = append(m.HyAllNamesOf, &HyAllNamesOf{})
			if err := m.HyAllNamesOf[len(m.HyAllNamesOf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
