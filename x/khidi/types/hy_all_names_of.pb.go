// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: khidi/hy_all_names_of.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HyAllNamesOf struct {
	Name                string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RecentMarketsize    string `protobuf:"bytes,2,opt,name=recentMarketsize,proto3" json:"recentMarketsize,omitempty"`
	RecentImport        string `protobuf:"bytes,3,opt,name=recentImport,proto3" json:"recentImport,omitempty"`
	RecentExport        string `protobuf:"bytes,4,opt,name=recentExport,proto3" json:"recentExport,omitempty"`
	DomesticMarketShare string `protobuf:"bytes,5,opt,name=domesticMarketShare,proto3" json:"domesticMarketShare,omitempty"`
	Competition         string `protobuf:"bytes,6,opt,name=competition,proto3" json:"competition,omitempty"`
	TradeDependency     string `protobuf:"bytes,7,opt,name=tradeDependency,proto3" json:"tradeDependency,omitempty"`
	Quality             string `protobuf:"bytes,8,opt,name=quality,proto3" json:"quality,omitempty"`
	Protectionism       string `protobuf:"bytes,9,opt,name=protectionism,proto3" json:"protectionism,omitempty"`
	Success             string `protobuf:"bytes,10,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *HyAllNamesOf) Reset()         { *m = HyAllNamesOf{} }
func (m *HyAllNamesOf) String() string { return proto.CompactTextString(m) }
func (*HyAllNamesOf) ProtoMessage()    {}
func (*HyAllNamesOf) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b1e175570564a27, []int{0}
}
func (m *HyAllNamesOf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HyAllNamesOf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HyAllNamesOf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HyAllNamesOf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HyAllNamesOf.Merge(m, src)
}
func (m *HyAllNamesOf) XXX_Size() int {
	return m.Size()
}
func (m *HyAllNamesOf) XXX_DiscardUnknown() {
	xxx_messageInfo_HyAllNamesOf.DiscardUnknown(m)
}

var xxx_messageInfo_HyAllNamesOf proto.InternalMessageInfo

func (m *HyAllNamesOf) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HyAllNamesOf) GetRecentMarketsize() string {
	if m != nil {
		return m.RecentMarketsize
	}
	return ""
}

func (m *HyAllNamesOf) GetRecentImport() string {
	if m != nil {
		return m.RecentImport
	}
	return ""
}

func (m *HyAllNamesOf) GetRecentExport() string {
	if m != nil {
		return m.RecentExport
	}
	return ""
}

func (m *HyAllNamesOf) GetDomesticMarketShare() string {
	if m != nil {
		return m.DomesticMarketShare
	}
	return ""
}

func (m *HyAllNamesOf) GetCompetition() string {
	if m != nil {
		return m.Competition
	}
	return ""
}

func (m *HyAllNamesOf) GetTradeDependency() string {
	if m != nil {
		return m.TradeDependency
	}
	return ""
}

func (m *HyAllNamesOf) GetQuality() string {
	if m != nil {
		return m.Quality
	}
	return ""
}

func (m *HyAllNamesOf) GetProtectionism() string {
	if m != nil {
		return m.Protectionism
	}
	return ""
}

func (m *HyAllNamesOf) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

func init() {
	proto.RegisterType((*HyAllNamesOf)(nil), "khidi.khidi.HyAllNamesOf")
}

func init() { proto.RegisterFile("khidi/hy_all_names_of.proto", fileDescriptor_1b1e175570564a27) }

var fileDescriptor_1b1e175570564a27 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4a, 0x33, 0x31,
	0x10, 0xc7, 0xbb, 0xfd, 0xfa, 0xb5, 0x36, 0xad, 0x28, 0xe9, 0x25, 0x20, 0x84, 0x52, 0x3c, 0x14,
	0xc1, 0x56, 0xf0, 0x09, 0x14, 0x05, 0x3d, 0xa8, 0xa0, 0x37, 0x2f, 0x4b, 0xcc, 0x4e, 0xd9, 0xd0,
	0xdd, 0xcd, 0x9a, 0xa4, 0xd0, 0xf5, 0x29, 0x7c, 0x2c, 0x8f, 0x3d, 0x7a, 0x94, 0xdd, 0xbb, 0xcf,
	0x20, 0x3b, 0x51, 0x6c, 0xd5, 0x4b, 0x92, 0xf9, 0xfd, 0x7f, 0x33, 0x87, 0x0c, 0xd9, 0x9b, 0xc7,
	0x2a, 0x52, 0xd3, 0xb8, 0x08, 0x45, 0x92, 0x84, 0x99, 0x48, 0xc1, 0x86, 0x7a, 0x36, 0xc9, 0x8d,
	0x76, 0x9a, 0xf6, 0x30, 0x9c, 0xe0, 0x39, 0x7a, 0x6f, 0x92, 0xfe, 0x45, 0x71, 0x92, 0x24, 0xd7,
	0xb5, 0x74, 0x33, 0xa3, 0x94, 0xb4, 0x6a, 0x9f, 0x05, 0xc3, 0x60, 0xdc, 0xbd, 0xc5, 0x37, 0x3d,
	0x20, 0xbb, 0x06, 0x24, 0x64, 0xee, 0x4a, 0x98, 0x39, 0x38, 0xab, 0x9e, 0x80, 0x35, 0x31, 0xff,
	0xc5, 0xe9, 0x88, 0xf4, 0x3d, 0xbb, 0x4c, 0x73, 0x6d, 0x1c, 0xfb, 0x87, 0xde, 0x06, 0xfb, 0x76,
	0xce, 0x97, 0xe8, 0xb4, 0xd6, 0x1d, 0xcf, 0xe8, 0x11, 0x19, 0x44, 0x3a, 0x05, 0xeb, 0x94, 0xf4,
	0xd3, 0xef, 0x62, 0x61, 0x80, 0xfd, 0x47, 0xf5, 0xaf, 0x88, 0x0e, 0x49, 0x4f, 0xea, 0x34, 0x07,
	0xa7, 0x9c, 0xd2, 0x19, 0x6b, 0xa3, 0xb9, 0x8e, 0xe8, 0x98, 0xec, 0x38, 0x23, 0x22, 0x38, 0x83,
	0x1c, 0xb2, 0x08, 0x32, 0x59, 0xb0, 0x0e, 0x5a, 0x3f, 0x31, 0x65, 0xa4, 0xf3, 0xb8, 0x10, 0x89,
	0x72, 0x05, 0xdb, 0x42, 0xe3, 0xab, 0xa4, 0xfb, 0x64, 0xbb, 0xfe, 0x46, 0x90, 0xf5, 0x44, 0x65,
	0x53, 0xd6, 0xc5, 0x7c, 0x13, 0xd6, 0xfd, 0x76, 0x21, 0x25, 0x58, 0xcb, 0x88, 0xef, 0xff, 0x2c,
	0x4f, 0x0f, 0x5f, 0x4a, 0x1e, 0xac, 0x4a, 0x1e, 0xbc, 0x95, 0x3c, 0x78, 0xae, 0x78, 0x63, 0x55,
	0xf1, 0xc6, 0x6b, 0xc5, 0x1b, 0xf7, 0x03, 0xbf, 0xb4, 0xe5, 0xd4, 0xdf, 0xae, 0xc8, 0xc1, 0x3e,
	0xb4, 0x71, 0x67, 0xc7, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x87, 0xcb, 0xf5, 0xc4, 0xd2, 0x01,
	0x00, 0x00,
}

func (m *HyAllNamesOf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HyAllNamesOf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HyAllNamesOf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Success) > 0 {
		i -= len(m.Success)
		copy(dAtA[i:], m.Success)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.Success)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Protectionism) > 0 {
		i -= len(m.Protectionism)
		copy(dAtA[i:], m.Protectionism)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.Protectionism)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Quality) > 0 {
		i -= len(m.Quality)
		copy(dAtA[i:], m.Quality)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.Quality)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TradeDependency) > 0 {
		i -= len(m.TradeDependency)
		copy(dAtA[i:], m.TradeDependency)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.TradeDependency)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Competition) > 0 {
		i -= len(m.Competition)
		copy(dAtA[i:], m.Competition)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.Competition)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DomesticMarketShare) > 0 {
		i -= len(m.DomesticMarketShare)
		copy(dAtA[i:], m.DomesticMarketShare)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.DomesticMarketShare)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RecentExport) > 0 {
		i -= len(m.RecentExport)
		copy(dAtA[i:], m.RecentExport)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.RecentExport)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecentImport) > 0 {
		i -= len(m.RecentImport)
		copy(dAtA[i:], m.RecentImport)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.RecentImport)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecentMarketsize) > 0 {
		i -= len(m.RecentMarketsize)
		copy(dAtA[i:], m.RecentMarketsize)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.RecentMarketsize)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHyAllNamesOf(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHyAllNamesOf(dAtA []byte, offset int, v uint64) int {
	offset -= sovHyAllNamesOf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HyAllNamesOf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.RecentMarketsize)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.RecentImport)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.RecentExport)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.DomesticMarketShare)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.Competition)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.TradeDependency)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.Quality)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.Protectionism)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	l = len(m.Success)
	if l > 0 {
		n += 1 + l + sovHyAllNamesOf(uint64(l))
	}
	return n
}

func sovHyAllNamesOf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHyAllNamesOf(x uint64) (n int) {
	return sovHyAllNamesOf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HyAllNamesOf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHyAllNamesOf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HyAllNamesOf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HyAllNamesOf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentMarketsize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentMarketsize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentImport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentImport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentExport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentExport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomesticMarketShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomesticMarketShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Competition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Competition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeDependency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeDependency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quality = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protectionism", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protectionism = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Success = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHyAllNamesOf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHyAllNamesOf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHyAllNamesOf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHyAllNamesOf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHyAllNamesOf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHyAllNamesOf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHyAllNamesOf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHyAllNamesOf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHyAllNamesOf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHyAllNamesOf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHyAllNamesOf = fmt.Errorf("proto: unexpected end of group")
)
